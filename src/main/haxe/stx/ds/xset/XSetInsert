package stx.ds.xset;

typedef XSetInsertDef<K,V> = Couple<K,Either<V,XSet<K,V>>>;

abstract XSetInsert<K,V>(XSetInsertDef<K,V>) from XSetInsertDef<K,V> to XSetInsertDef<K,V>{
  public function new(self) this = self;
  @:noUsing static public function lift<K,V>(self:XSetInsertDef<K,V>):XSetInsert<K,V> return new XSetInsert(self);

  public function prj():XSetInsertDef<K,V> return this;
  private var self(get,never):XSetInsert<K,V>;
  private function get_self():XSetInsert<K,V> return lift(this);

  @:from static public function fromObjCouple<K,V>(couple:Couple<K,XSet<K,V>>):XSetVal<K,V>{
    return lift(couple.map(Right));
  }
  @:from static public function fromValCouple<K,V>(couple:Couple<K,V>):XSetVal<K,V>{
    return lift(couple.map(Left));
  }
  @:to public function toXSetVal():XSetVal<K,V>{
    return this.decouple(
      (k,v) -> switch(v){
        case Left(x)  : XSetVal.fromValCouple(__.couple(k,x));
        case Right(x) : XSetVal.fromObjCouple(k,x);
      }
    );
  }
}